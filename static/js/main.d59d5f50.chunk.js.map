{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","components/Player.js","pages/Homepage.js","components/ResponsiveAppBar.js","components/LogGridRow.js","pages/LogPage.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","process","href","target","rel","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Player","props","id","name","spells","flasks","food","weaponBuffs","scrolls","potions","runes","trinkets","items","playerClass","auras","Homepage","_useState","useState","_useState2","Object","slicedToArray","logCode","setLogCode","navigate","useNavigate","Container","maxWidth","Box","display","justifyContent","paddingY","Stack","spacing","alignItems","Typography","variant","TextField","onChange","event","value","console","log","hiddenLabel","size","sx","width","Button","onClick","replace","state","code","Grid","container","pages","settings","ResponsiveAppBar","anchorElNav","setAnchorElNav","_useState3","_useState4","isUserMenuOpen","setIsUserMenuOpen","handleCloseUserMenu","react","AppBar","position","Toolbar","disableGutters","Adb_default","xs","md","mr","noWrap","component","fontFamily","fontWeight","letterSpacing","color","textDecoration","flexGrow","IconButton","aria-label","aria-controls","aria-haspopup","currentTarget","Menu_default","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","map","page","MenuItem","key","Link","to","textAlign","my","Tooltip","title","Avatar","mt","setting","LogGridRow","player","auraElements","whitelist","elementList","forEach","aura","includes","abilityID","element","paddingX","item","style","minWidth","padding","icon","count","push","createAuraElements","auraMap","Map","auraFight","has","ability","get","set","parseAurasToDisplay","LogPage","useLocation","fightIds","EVENT_QUERY","gql","_templateObject5","taggedTemplateLiteral","_useQuery4","useQuery","loading","error","data","temp","reportData","report","fights","fight","encounterID","getAllFightInformation","playerMap","PLAYER_QUERY","LogPage_templateObject","_useQuery","playerData","playerDetails","playerClassList","playerList","playerObj","type","playerObjMap","entries","_step","_iterator","LogPage_createForOfIteratorHelper","keys","s","n","done","toConsumableArray","sort","err","f","getPlayerInformation","playerID","Array","isArray","COMBATANT_INFO_QUERY","LogPage_templateObject3","_useQuery3","_templateObject4","combatantInfo","events","getEventInformation","auraList","combatantInfoList","sourceID","parseCombatantInfo","sortedMap","classSortMap","playerNameSortMap","fullySortedMap","sortPlayersByNameAndClass","from","_ref2","components_Player","renderArr","gridRow","components_LogGridRow","backgroundColor","root","ReactDOM","createRoot","document","getElementById","httpLink","createHttpLink","uri","authLink","setContext","_","headers","objectSpread","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","render","ApolloProvider","react_router_dom","components_ResponsiveAppBar","react_router","path","pages_Homepage","src_App","pages_LogPage"],"mappings":"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","file":"static/js/main.d59d5f50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          {process.env.REACT_APP_TESTING}\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nfunction Player(props) {\r\n    const id = props.id;\r\n    let name = props.name;\r\n    let spells = props.spells;\r\n    let flasks = props.flasks;\r\n    let food = props.food;\r\n    let weaponBuffs = props.weaponBuffs;\r\n    let scrolls = props.scrolls;\r\n    let potions = props.potions;\r\n    let runes = props.runes;\r\n    let trinkets = props.trinkets;\r\n    let items = props.items;\r\n    let playerClass = props.playerClass;\r\n    const auras = props.auras;\r\n    // let spec = props.spec;\r\n}\r\n\r\n\r\n\r\nexport default Player;","import React, {useCallback, useState} from 'react';\r\nimport {\r\n    Grid,\r\n    Stack, TextField\r\n} from \"@mui/material\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {gql, useQuery} from \"@apollo/client\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Player from \"../components/Player\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\n\r\n\r\nfunction Homepage() {\r\n\r\n    const [logCode, setLogCode] = useState('');\r\n\r\n    const handleInput = event => {\r\n        setLogCode(event.target.value);\r\n        console.log(\"Input code is: \" + event.target.value);\r\n    }\r\n\r\n    const navigate = useNavigate();\r\n    return (\r\n        <Container maxWidth={'95%'}>\r\n            <Box display=\"flex\" justifyContent=\"center\" paddingY={2}>\r\n                <Stack spacing={2} alignItems=\"center\">\r\n                    <Typography variant=\"h5\">\r\n                        Insert link to warcraftlogs report in the field below. Currently only TBC logs are accepted.\r\n                    </Typography>\r\n                    <TextField id=\"filled-basic\" onChange={handleInput} variant=\"filled\" hiddenLabel size=\"small\" sx={{width: 1 / 2}}/>\r\n                    <Button variant=\"contained\" onClick={() => navigate('/logpage', {replace: true, state: {code: logCode}})}>\r\n                        <Typography>\r\n                            Analyze\r\n                        </Typography>\r\n                    </Button>\r\n                    <Grid container spacing={2}>\r\n                    </Grid>\r\n                </Stack>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n\r\nfunction getPlayerInformation() {\r\n    const PLAYER_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"6qZLQG8N7gyvh4Td\"){\r\n\t\t\tplayerDetails(startTime:386982, endTime:13327785)\r\n\t\t}\r\n\t}\r\n}`;\r\n    const {loading, error, data} = useQuery(PLAYER_QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n\r\n    const playerData = data.reportData.report.playerDetails.data.playerDetails;\r\n    let playerList = new Map();\r\n\r\n    for(const key in playerData){\r\n        playerData[key].forEach((player) => {\r\n            // console.log(playerList);\r\n            if (!playerList.has(player.type)){\r\n                playerList.set(player.type, new Map());\r\n                playerList.get(player.type).set(player.name, <Player id={player.id} name={player.name} playerClass={player.type}/>);\r\n            } else {\r\n                if (!playerList.get(player.type).has(player.id)) {\r\n                    playerList.get(player.type).set(player.name, <Player id={player.id} name={player.name} playerClass={player.type}/>);\r\n                    // playerList[player.id] = <Player id={player.id} name={player.name} playerClass={player.type}/>;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    for (const key of playerList.keys()) {\r\n        playerList.set(key, new Map([...playerList.get(key)].sort()));\r\n    }\r\n\r\n    return new Map([...playerList].sort());\r\n}\r\n\r\nfunction getEventInformation() {\r\n    const EVENT_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"6qZLQG8N7gyvh4Td\"){\r\n\t\t\tevents(startTime:386982, endTime:13327785){\r\n\t\t\t\tdata\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}`;\r\n\r\n    const {loading, error, data} = useQuery(EVENT_QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n\r\n    const temp = data.reportData.report.events.data;\r\n\r\n    let arr = [];\r\n    let playerArr = {};\r\n    let count = 0;\r\n    temp.forEach((event) => {\r\n        if (event.type === 'combatantinfo' && !playerArr.hasOwnProperty(event.sourceID)) {\r\n            count++;\r\n            playerArr[event.sourceID] = event;\r\n        }\r\n        if (event.type === 'heal' && event.sourceID === 9) {\r\n            arr.push(event);\r\n        }\r\n    })\r\n    // console.log(Object.keys(playerArr).length);\r\n    console.log(playerArr);\r\n\r\n    return arr;\r\n\r\n}\r\n\r\nfunction getMemberInformation() {\r\n    const QUERY = gql`\r\n    query {\r\n\tguildData{\r\n\t\tguild(id:480659){\r\n\t\t\tattendance{\r\n\t\t\t\tdata{\r\n\t\t\t\t\tplayers{\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}`;\r\n\r\n    const {loading, error, data} = useQuery(QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n    const temp = data.guildData.guild.attendance.data;\r\n    let arr = [];\r\n    temp.forEach((list) => {\r\n        list.players.forEach((char) => {\r\n            if (!arr.includes(char.name)) {\r\n                arr.push(char.name);\r\n            }\r\n        })\r\n    })\r\n    return arr;\r\n}\r\n\r\nexport default Homepage;","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport AdbIcon from '@mui/icons-material/Adb';\r\nimport {Link} from \"react-router-dom\";\r\nimport {useState} from \"react\";\r\n\r\nconst pages = ['App'];\r\nconst settings = ['Profile', 'Account', 'Dashboard', 'Logout'];\r\n\r\nconst ResponsiveAppBar = () => {\r\n    // const [count, setCount] = useState(0);\r\n    const [anchorElNav, setAnchorElNav] = useState(null);\r\n    const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);\r\n\r\n    // const handleClickCounter = () => {\r\n    //     setCount(count + 1);\r\n    // }\r\n\r\n    const handleOpenNavMenu = (event) => {\r\n        setAnchorElNav(event.currentTarget);\r\n    };\r\n    const handleOpenUserMenu = (event) => {\r\n        console.log(event);\r\n        setIsUserMenuOpen(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseNavMenu = () => {\r\n        setAnchorElNav(null);\r\n    };\r\n\r\n    const handleCloseUserMenu = () => {\r\n        setIsUserMenuOpen(null);\r\n    };\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Container maxWidth=\"xl\">\r\n                <Toolbar disableGutters>\r\n                    <AdbIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} />\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        noWrap\r\n                        component=\"a\"\r\n                        href=\"/\"\r\n                        sx={{\r\n                            mr: 2,\r\n                            display: { xs: 'none', md: 'flex' },\r\n                            fontFamily: 'monospace',\r\n                            fontWeight: 700,\r\n                            letterSpacing: '.3rem',\r\n                            color: 'inherit',\r\n                            textDecoration: 'none',\r\n                        }}\r\n                    >\r\n                        PogLogs\r\n                    </Typography>\r\n\r\n                    <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"menu-appbar\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleOpenNavMenu}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={anchorElNav}\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'left',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'left',\r\n                            }}\r\n                            open={Boolean(anchorElNav)}\r\n                            onClose={handleCloseNavMenu}\r\n                            sx={{\r\n                                display: { xs: 'block', md: 'none' },\r\n                            }}\r\n                        >\r\n                            {pages.map((page) => (\r\n                                <MenuItem key={page} component={Link} to={page}>\r\n                                    <Typography textAlign=\"center\">{page}</Typography>\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Menu>\r\n                    </Box>\r\n                    <AdbIcon sx={{ display: { xs: 'flex', md: 'none' }, mr: 1 }} />\r\n                    <Typography\r\n                        variant=\"h5\"\r\n                        noWrap\r\n                        component=\"a\"\r\n                        href=\"\"\r\n                        sx={{\r\n                            mr: 2,\r\n                            display: { xs: 'flex', md: 'none' },\r\n                            flexGrow: 1,\r\n                            fontFamily: 'monospace',\r\n                            fontWeight: 700,\r\n                            letterSpacing: '.3rem',\r\n                            color: 'inherit',\r\n                            textDecoration: 'none',\r\n                        }}\r\n                    >\r\n                        PogLogs\r\n                    </Typography>\r\n                    <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n                        {pages.map((page) => (\r\n                            <Button key={page}\r\n                                component={Link} to={page}\r\n                                sx={{ my: 2, color: 'white', display: 'block' }}\r\n                            >\r\n                                {page}\r\n                            </Button>\r\n                        ))}\r\n                    </Box>\r\n\r\n                    <Box sx={{ flexGrow: 0 }}>\r\n                        <Tooltip title=\"Open settings\">\r\n                            <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n                                <Avatar>T</Avatar>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Menu\r\n                            sx={{ mt: '45px' }}\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={isUserMenuOpen}\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            open={Boolean(isUserMenuOpen)}\r\n                            onClose={handleCloseUserMenu}\r\n                        >\r\n                            {settings.map((setting) => (\r\n                                <MenuItem key={setting} onClick={handleCloseUserMenu}>\r\n                                    <Typography textAlign=\"center\">{setting}</Typography>\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Menu>\r\n                    </Box>\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    );\r\n};\r\nexport default ResponsiveAppBar;\r\n","import {Button, Grid, Link, Stack} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport {Image} from \"@mui/icons-material\";\r\n\r\nfunction LogGridRow(props) {\r\n    const auraWhitelist = [33263,33261,33268,39625,17538,17627,28540,41605,28519,11406,28509,28520,11371,28497,28521,46840,39627,28491,41606,46838,33256];\r\n    const player = props.player;\r\n    const auras = props.auras;\r\n    // console.log(auras);\r\n    // console.log(player);\r\n    const auraMap = parseAurasToDisplay(player, auras);\r\n    const auraElements = createAuraElements(auraMap, auraWhitelist);\r\n    // console.log(auraElements);\r\n    return (\r\n        <Grid item container padding={1}>\r\n            <Grid item xs={2} key={player.get('name')} color={getClassColor(player.get('playerClass'))}> {player.get('name')} </Grid>\r\n            {/*<Grid item xs={2} key={\"class\" + player.get('id')}> {player.get('playerClass')} </Grid>*/}\r\n            {/*<Grid item xs={8} key={\"aura\" + player.get('id')}>*/}\r\n            <Grid container item xs={10}>\r\n                {auraElements}\r\n            </Grid>\r\n            {/*</Grid>*/}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction getClassColor(playerClass) {\r\n    let classColors = new Map([\r\n        [\"Druid\", \"#FF7C0A\"],\r\n        [\"Hunter\", \"#AAD372\"],\r\n        [\"Mage\", \"#3FC7EB\"],\r\n        [\"Paladin\", \"#F48CBA\"],\r\n        [\"Priest\", \"#FFFFFF\"],\r\n        [\"Rogue\", \"#FFF468\"],\r\n        [\"Shaman\", \"#0070DD\"],\r\n        [\"Warlock\", \"#8788EE\"],\r\n        [\"Warrior\", \"#C69B6D\"]\r\n    ]);\r\n    return classColors.get(playerClass);\r\n}\r\n\r\nfunction createAuraElements(auras, whitelist) {\r\n    const elementList = [];\r\n    auras.forEach((aura) => {\r\n        if (whitelist.includes(aura.abilityID)) {\r\n            const element = <Stack alignItems={\"center\"} maxWidth={\"35px\"} paddingX={1}>\r\n                <Grid item display={\"flex\"} justifyContent={\"center\"} key={\"auraName\" + aura.name}>\r\n                    <Button variant={\"text\"} style={{minWidth: \"10px\", padding: 0}} href={\"https://tbc.wowhead.com/spell=\" + aura.abilityID}>\r\n                        <img width={\"100%\"} src={\"https://wow.zamimg.com/images/wow/icons/large/\" + aura.icon} alt={aura.icon}/>\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item key={\"auraNameCount\" + aura.name}>{aura.count}</Grid>\r\n            </Stack>;\r\n            elementList.push(element);\r\n        }\r\n    })\r\n    return elementList;\r\n}\r\n\r\nfunction parseAurasToDisplay(player, auras) {\r\n    let auraMap = new Map();\r\n\r\n    auras.forEach((auraFight) => {\r\n        auraFight.forEach((aura) => {\r\n            if (!auraMap.has(aura.ability)) {\r\n                auraMap.set(aura.ability, {abilityID: aura.ability, icon: aura.icon, name: aura.name, count: 1});\r\n            } else {\r\n                auraMap.get(aura.ability).count++;\r\n            }\r\n        });\r\n    })\r\n\r\n    // player.get('auras').forEach((auraFight) => {\r\n    //     auraFight.forEach((aura) => {\r\n    //         // console.log(aura.ability);\r\n    //         if (!auraMap.has(aura.ability)) {\r\n    //             auraMap.set(aura.ability, {abilityID: aura.ability, icon: aura.icon, name: aura.name, count: 0});\r\n    //         } else {\r\n    //             auraMap.get(aura.ability).count++;\r\n    //         }\r\n    //     });\r\n    // });\r\n    return auraMap;\r\n}\r\n\r\nexport default LogGridRow;","import {Grid, Stack, TextField} from \"@mui/material\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport React from \"react\";\r\nimport {gql, useQuery} from \"@apollo/client\";\r\nimport Player from \"../components/Player\";\r\nimport {useLocation} from \"react-router-dom\";\r\nimport LogGridRow from \"../components/LogGridRow\";\r\n\r\nfunction LogPage() {\r\n    const location = useLocation();\r\n    const logCode = location.state.code;\r\n    // console.log(location.state.code);\r\n    const fightIds = getAllFightInformation(logCode);\r\n    const playerMap = getPlayerInformation(logCode);\r\n    const temp = getEventInformation(logCode, 9, fightIds);\r\n    if (!temp || !playerMap) {\r\n        return(\r\n            <Typography variant={\"h2\"}>\r\n                HOLD UP\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n\r\n    const auraList = parseCombatantInfo(playerMap, temp);\r\n    const sortedMap = sortPlayersByNameAndClass(playerMap);\r\n\r\n    console.log(sortedMap);\r\n\r\n    const arr = Array.from(playerMap, ([key, value]) => {\r\n        return <Player id={value.get('id')} name={value.get('name')} playerClass={value.get('playerClass')} auras={value.get('auras')}/>;\r\n    });\r\n\r\n    let renderArr = [];\r\n\r\n    sortedMap.forEach((player) => {\r\n        const gridRow = <LogGridRow player={player} auras={auraList.get(player.get('id'))}/>\r\n        renderArr.push(gridRow);\r\n    })\r\n\r\n    return (\r\n        <Container maxWidth={'95%'}>\r\n            <Box display=\"flex\" justifyContent=\"center\" paddingY={2}>\r\n                <Stack spacing={2} alignItems=\"center\">\r\n                    <Typography variant=\"h5\">\r\n                        Insert link to warcraftlogs report in the field below. Currently only TBC logs are accepted.\r\n                    </Typography>\r\n                    <TextField id=\"filled-basic\" variant=\"filled\" hiddenLabel size=\"small\" sx={{width: 1 / 2}}/>\r\n                    <Button variant=\"contained\">\r\n                        <Typography>\r\n                            Analyze\r\n                        </Typography>\r\n                    </Button>\r\n                    <Grid key={\"GridContainer\"} container style={{backgroundColor: \"gray\", color: \"white\"}}>\r\n                        <Grid item container key={\"GridHeaderName\"} style={{backgroundColor: \"darkslategray\"}} padding={1}>\r\n                            <Grid item xs={2} key={\"GridHeaderName\"}>\r\n                                <Typography variant={\"h5\"}>\r\n                                    Player\r\n                                </Typography>\r\n                            </Grid>\r\n                            {/*<Grid item xs={2} key={\"GridHeaderClass\"}>*/}\r\n                            {/*    <Typography variant={\"h5\"}>*/}\r\n                            {/*        Class*/}\r\n                            {/*    </Typography>*/}\r\n                            {/*</Grid>*/}\r\n                            <Grid item xs={10} key={\"GridHeaderAuras\"}>\r\n                                <Typography variant={\"h5\"}>\r\n                                    Auras\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {renderArr}\r\n                    </Grid>\r\n                </Stack>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n\r\nfunction sortPlayersByNameAndClass(playerList) {\r\n    const classSortMap = new Map();\r\n    const playerNameSortMap = new Map();\r\n\r\n    playerList.forEach((player) => {\r\n        playerNameSortMap.set(player.get('name'), player);\r\n    });\r\n\r\n    const sortedPlayerNameMap = new Map([...playerNameSortMap].sort());\r\n\r\n    sortedPlayerNameMap.forEach((player) => {\r\n        if (!classSortMap.has(player.get('playerClass'))) {\r\n            classSortMap.set(player.get('playerClass'), new Map());\r\n        }\r\n        classSortMap.get(player.get('playerClass')).set(player.get('name'), player);\r\n    });\r\n\r\n    const sortedMap = new Map([...classSortMap].sort());\r\n\r\n    const fullySortedMap = new Map();\r\n    sortedMap.forEach((playerClass) => {\r\n        playerClass.forEach((player) => {\r\n            console.log(player);\r\n            fullySortedMap.set(player.get('name'), player)\r\n        })\r\n    })\r\n\r\n    console.log(fullySortedMap);\r\n    return fullySortedMap;\r\n}\r\n\r\nfunction getPlayerInformation(logCode) {\r\n    const PLAYER_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"${logCode}\"){\r\n\t\t\tplayerDetails(startTime:386982, endTime:13327785)\r\n\t\t}\r\n\t}\r\n}`;\r\n    const {loading, error, data} = useQuery(PLAYER_QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n\r\n    const playerData = data.reportData.report.playerDetails.data.playerDetails;\r\n    let playerClassList = new Map();\r\n    let playerList = new Map();\r\n    for(const key in playerData){\r\n        playerData[key].forEach((player) => {\r\n            // const playerObj = <Player id={player.id} name={player.name} playerClass={player.type}/>;\r\n            const playerObj = {id: player.id, name: player.name, playerClass: player.type, auras: []};\r\n            const playerObjMap = new Map(Object.entries(playerObj));\r\n            playerList.set(player.id, playerObjMap);\r\n\r\n            if (!playerClassList.has(player.type)) {\r\n                playerClassList.set(player.type, new Map());\r\n                playerClassList.get(player.type).set(player.name, playerObjMap);\r\n            } else {\r\n                if (!playerClassList.get(player.type).has(player.id)) {\r\n                    playerClassList.get(player.type).set(player.name, playerObjMap);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    for (const key of playerClassList.keys()) {\r\n        playerClassList.set(key, new Map([...playerClassList.get(key)].sort()));\r\n    }\r\n\r\n    // console.log(playerClassList);\r\n\r\n    return playerList;\r\n}\r\n\r\nfunction getTableInformation(logCode, playerID) {\r\n    const TABLE_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"${logCode}\"){\r\n\t\t\ttable(startTime:386982, endTime:13327785)\r\n\t\t}\r\n\t}\r\n}`;\r\n\r\n    const {loading, error, data} = useQuery(TABLE_QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n\r\n    const temp = data.reportData.report.table.data;\r\n    console.log(temp);\r\n\r\n    temp.forEach((evt) => {\r\n        console.log(evt);\r\n    });\r\n\r\n    return false;\r\n}\r\n\r\nfunction getEventInformation(logCode, playerID, fightIds) {\r\n    fightIds = Array.isArray(fightIds) ? fightIds : [];\r\n    const COMBATANT_INFO_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"${logCode}\"){\r\n\t\t\tevents(startTime:0, endTime:99999999, fightIDs:[${fightIds}], dataType: CombatantInfo){\r\n\t\t\t\tdata\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}`;\r\n\r\n    const CAST_INFO_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"${logCode}\"){\r\n\t\t\tevents(startTime:0, endTime:99999999, fightIDs:[${fightIds}], dataType: Casts){\r\n\t\t\t\tdata\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}`;\r\n\r\n    // console.log(fightIds);\r\n    const {loading, error, data} = useQuery(COMBATANT_INFO_QUERY);\r\n    // const {loading, error, data} = useQuery(CAST_INFO_QUERY);\r\n\r\n    if (loading || error) {\r\n        console.log(error);\r\n        return false;\r\n    }\r\n    const combatantInfo = data.reportData.report.events.data;\r\n    // const castInfo = data.reportData.report.events.data;\r\n    // console.log(\"YOLOOOOO\")\r\n    // console.log(combatantInfo);\r\n    combatantInfo.forEach((event) => {\r\n            // console.log(event);\r\n        if (event.type === \"combatantinfo\") {\r\n        }\r\n    })\r\n    // return false;\r\n\r\n\r\n    // console.log(combatantInfo);\r\n    return combatantInfo;\r\n}\r\n\r\nfunction parseCombatantInfo(playerMap, combatantInfoList) {\r\n    const auraList = new Map();\r\n    // console.log(playerMap);\r\n    combatantInfoList.forEach((event) => {\r\n        const player = playerMap.get(event.sourceID);\r\n        // console.log(event.auras);\r\n        player.get('auras').push(event.auras);\r\n\r\n        if (!auraList.has(event.sourceID)) {\r\n            auraList.set(event.sourceID, [event.auras]);\r\n        } else {\r\n            auraList.get(event.sourceID).push(event.auras);\r\n        }\r\n        // if (event.sourceID === 9) {\r\n        //     auraList.push(event.auras);\r\n        // }\r\n    });\r\n\r\n    return auraList;\r\n    // console.log(auraList);\r\n}\r\n\r\nfunction getAllFightInformation(logCode) {\r\n    const EVENT_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"${logCode}\"){\r\n\t\t\tfights{\r\n\t\t\t\tname\r\n\t\t\t\tbossPercentage\r\n\t\t\t\tencounterID\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}`;\r\n\r\n    const {loading, error, data} = useQuery(EVENT_QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n\r\n    const temp = data.reportData.report.fights;\r\n    const fights = [];\r\n    temp.forEach((fight) => {\r\n        if (fight.encounterID !== 0) {\r\n            fights.push(fight.id);\r\n        }\r\n    })\r\n    return fights;\r\n}\r\n\r\nexport default LogPage;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Homepage from \"./pages/Homepage\";\nimport {BrowserRouter as Router, Route, Routes} from \"react-router-dom\";\nimport ResponsiveAppBar from \"./components/ResponsiveAppBar\";\nimport {ApolloClient, ApolloProvider, createHttpLink, InMemoryCache} from \"@apollo/client\";\nimport {setContext} from \"@apollo/client/link/context\";\nimport LogPage from \"./pages/LogPage\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nconst httpLink = createHttpLink({\n    uri: process.env.REACT_APP_WARCRAFTLOGS_URI,\n});\n\nconst authLink = setContext((_, {headers}) => {\n    const token = process.env.REACT_APP_WARCRAFTLOGS_BEARER;\n    return {\n        headers: {\n            ...headers,\n            authorization: \"Bearer \" + token,\n        }\n    }\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n});\n\n\nroot.render(\n    <div>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n        />\n\n        <ApolloProvider client={client}>\n            <Router>\n                <ResponsiveAppBar/>\n                <Routes>\n                    <Route path=\"/\" element={<Homepage client={client}/>}/>\n                    <Route path=\"/app\" element={<App/>}/>\n                    <Route path=\"/logpage\" element={<LogPage/>}/>\n                </Routes>\n            </Router>\n        </ApolloProvider>\n    </div>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}