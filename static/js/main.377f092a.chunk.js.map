{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","components/Player.js","pages/Homepage.js","components/ResponsiveAppBar.js","pages/LogPage.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","process","href","target","rel","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Player","props","id","name","spells","flasks","food","weaponBuffs","scrolls","potions","runes","trinkets","items","playerClass","Homepage","_useState","useState","_useState2","Object","slicedToArray","logCode","setLogCode","navigate","useNavigate","Container","maxWidth","Box","display","justifyContent","paddingY","Stack","spacing","alignItems","Typography","variant","TextField","onChange","event","value","console","log","hiddenLabel","size","sx","width","Button","onClick","replace","state","code","Grid","container","pages","settings","ResponsiveAppBar","anchorElNav","setAnchorElNav","_useState3","_useState4","isUserMenuOpen","setIsUserMenuOpen","handleCloseUserMenu","react","AppBar","position","Toolbar","disableGutters","Adb_default","xs","md","mr","noWrap","component","fontFamily","fontWeight","letterSpacing","color","textDecoration","flexGrow","IconButton","aria-label","aria-controls","aria-haspopup","currentTarget","Menu_default","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","map","page","MenuItem","key","Link","to","textAlign","my","Tooltip","title","Avatar","mt","setting","LogPage","location","useLocation","assocArray","PLAYER_QUERY","gql","LogPage_templateObject","taggedTemplateLiteral","_useQuery","useQuery","loading","error","data","playerData","reportData","report","playerDetails","playerList","Map","forEach","player","has","type","get","set","components_Player","_step","_iterator","LogPage_createForOfIteratorHelper","keys","s","n","done","toConsumableArray","sort","err","f","getPlayerInformation","arr","Array","from","_ref2","_ref3","_ref4","renderArr","push","item","root","ReactDOM","createRoot","document","getElementById","httpLink","createHttpLink","uri","authLink","setContext","_","headers","objectSpread","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","render","ApolloProvider","react_router_dom","components_ResponsiveAppBar","react_router","path","element","pages_Homepage","src_App","pages_LogPage"],"mappings":"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","file":"static/js/main.377f092a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          {process.env.REACT_APP_TESTING}\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nfunction Player(props) {\r\n    const id = props.id;\r\n    let name = props.name;\r\n    let spells = props.spells;\r\n    let flasks = props.flasks;\r\n    let food = props.food;\r\n    let weaponBuffs = props.weaponBuffs;\r\n    let scrolls = props.scrolls;\r\n    let potions = props.potions;\r\n    let runes = props.runes;\r\n    let trinkets = props.trinkets;\r\n    let items = props.items;\r\n    let playerClass = props.playerClass;\r\n    // let spec = props.spec;\r\n}\r\n\r\n\r\n\r\nexport default Player;","import React, {useCallback, useState} from 'react';\r\nimport {\r\n    Grid,\r\n    Stack, TextField\r\n} from \"@mui/material\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {gql, useQuery} from \"@apollo/client\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Player from \"../components/Player\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\n\r\n\r\nfunction Homepage() {\r\n\r\n    const [logCode, setLogCode] = useState('');\r\n\r\n    const handleInput = event => {\r\n        setLogCode(event.target.value);\r\n        console.log(\"Input code is: \" + event.target.value);\r\n    }\r\n\r\n    // const handleOnClick = useCallback((code: logCode) => {\r\n    //     console.log(logCode);\r\n    //     // navigate('/logpage', {state: {code: code}});\r\n    // }, [navigate]);\r\n\r\n    const navigate = useNavigate();\r\n    return (\r\n        <Container maxWidth={'95%'}>\r\n            <Box display=\"flex\" justifyContent=\"center\" paddingY={2}>\r\n                <Stack spacing={2} alignItems=\"center\">\r\n                    <Typography variant=\"h5\">\r\n                        Insert link to warcraftlogs report in the field below. Currently only TBC logs are accepted.\r\n                    </Typography>\r\n                    <TextField id=\"filled-basic\" onChange={handleInput} variant=\"filled\" hiddenLabel size=\"small\" sx={{width: 1 / 2}}/>\r\n                    <Button variant=\"contained\" onClick={() => navigate('/logpage', {replace: true, state: {code: logCode}})}>\r\n                        <Typography>\r\n                            Analyze\r\n                        </Typography>\r\n                    </Button>\r\n                    <Grid container spacing={2}>\r\n                    </Grid>\r\n                </Stack>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n\r\nfunction getPlayerInformation() {\r\n    const PLAYER_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"6qZLQG8N7gyvh4Td\"){\r\n\t\t\tplayerDetails(startTime:386982, endTime:13327785)\r\n\t\t}\r\n\t}\r\n}`;\r\n    const {loading, error, data} = useQuery(PLAYER_QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n\r\n    const playerData = data.reportData.report.playerDetails.data.playerDetails;\r\n    let playerList = new Map();\r\n\r\n    for(const key in playerData){\r\n        playerData[key].forEach((player) => {\r\n            // console.log(playerList);\r\n            if (!playerList.has(player.type)){\r\n                playerList.set(player.type, new Map());\r\n                playerList.get(player.type).set(player.name, <Player id={player.id} name={player.name} playerClass={player.type}/>);\r\n            } else {\r\n                if (!playerList.get(player.type).has(player.id)) {\r\n                    playerList.get(player.type).set(player.name, <Player id={player.id} name={player.name} playerClass={player.type}/>);\r\n                    // playerList[player.id] = <Player id={player.id} name={player.name} playerClass={player.type}/>;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    for (const key of playerList.keys()) {\r\n        playerList.set(key, new Map([...playerList.get(key)].sort()));\r\n    }\r\n\r\n    return new Map([...playerList].sort());\r\n}\r\n\r\nfunction getEventInformation() {\r\n    const EVENT_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"6qZLQG8N7gyvh4Td\"){\r\n\t\t\tevents(startTime:386982, endTime:13327785){\r\n\t\t\t\tdata\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}`;\r\n\r\n    const {loading, error, data} = useQuery(EVENT_QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n\r\n    const temp = data.reportData.report.events.data;\r\n\r\n    let arr = [];\r\n    let playerArr = {};\r\n    let count = 0;\r\n    temp.forEach((event) => {\r\n        if (event.type === 'combatantinfo' && !playerArr.hasOwnProperty(event.sourceID)) {\r\n            count++;\r\n            playerArr[event.sourceID] = event;\r\n        }\r\n        if (event.type === 'heal' && event.sourceID === 9) {\r\n            arr.push(event);\r\n        }\r\n    })\r\n    // console.log(Object.keys(playerArr).length);\r\n    console.log(playerArr);\r\n\r\n    return arr;\r\n\r\n}\r\n\r\nfunction getMemberInformation() {\r\n    const QUERY = gql`\r\n    query {\r\n\tguildData{\r\n\t\tguild(id:480659){\r\n\t\t\tattendance{\r\n\t\t\t\tdata{\r\n\t\t\t\t\tplayers{\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}`;\r\n\r\n    const {loading, error, data} = useQuery(QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n    const temp = data.guildData.guild.attendance.data;\r\n    let arr = [];\r\n    temp.forEach((list) => {\r\n        list.players.forEach((char) => {\r\n            if (!arr.includes(char.name)) {\r\n                arr.push(char.name);\r\n            }\r\n        })\r\n    })\r\n    return arr;\r\n}\r\n\r\nexport default Homepage;","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport AdbIcon from '@mui/icons-material/Adb';\r\nimport {Link} from \"react-router-dom\";\r\nimport {useState} from \"react\";\r\n\r\nconst pages = ['App'];\r\nconst settings = ['Profile', 'Account', 'Dashboard', 'Logout'];\r\n\r\nconst ResponsiveAppBar = () => {\r\n    // const [count, setCount] = useState(0);\r\n    const [anchorElNav, setAnchorElNav] = useState(null);\r\n    const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);\r\n\r\n    // const handleClickCounter = () => {\r\n    //     setCount(count + 1);\r\n    // }\r\n\r\n    const handleOpenNavMenu = (event) => {\r\n        setAnchorElNav(event.currentTarget);\r\n    };\r\n    const handleOpenUserMenu = (event) => {\r\n        console.log(event);\r\n        setIsUserMenuOpen(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseNavMenu = () => {\r\n        setAnchorElNav(null);\r\n    };\r\n\r\n    const handleCloseUserMenu = () => {\r\n        setIsUserMenuOpen(null);\r\n    };\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Container maxWidth=\"xl\">\r\n                <Toolbar disableGutters>\r\n                    <AdbIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} />\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        noWrap\r\n                        component=\"a\"\r\n                        href=\"/\"\r\n                        sx={{\r\n                            mr: 2,\r\n                            display: { xs: 'none', md: 'flex' },\r\n                            fontFamily: 'monospace',\r\n                            fontWeight: 700,\r\n                            letterSpacing: '.3rem',\r\n                            color: 'inherit',\r\n                            textDecoration: 'none',\r\n                        }}\r\n                    >\r\n                        LOGO\r\n                    </Typography>\r\n\r\n                    <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"menu-appbar\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleOpenNavMenu}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={anchorElNav}\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'left',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'left',\r\n                            }}\r\n                            open={Boolean(anchorElNav)}\r\n                            onClose={handleCloseNavMenu}\r\n                            sx={{\r\n                                display: { xs: 'block', md: 'none' },\r\n                            }}\r\n                        >\r\n                            {pages.map((page) => (\r\n                                <MenuItem key={page} component={Link} to={page}>\r\n                                    <Typography textAlign=\"center\">{page}</Typography>\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Menu>\r\n                    </Box>\r\n                    <AdbIcon sx={{ display: { xs: 'flex', md: 'none' }, mr: 1 }} />\r\n                    <Typography\r\n                        variant=\"h5\"\r\n                        noWrap\r\n                        component=\"a\"\r\n                        href=\"\"\r\n                        sx={{\r\n                            mr: 2,\r\n                            display: { xs: 'flex', md: 'none' },\r\n                            flexGrow: 1,\r\n                            fontFamily: 'monospace',\r\n                            fontWeight: 700,\r\n                            letterSpacing: '.3rem',\r\n                            color: 'inherit',\r\n                            textDecoration: 'none',\r\n                        }}\r\n                    >\r\n                        LOGO\r\n                    </Typography>\r\n                    <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n                        {pages.map((page) => (\r\n                            <Button key={page}\r\n                                component={Link} to={page}\r\n                                sx={{ my: 2, color: 'white', display: 'block' }}\r\n                            >\r\n                                {page}\r\n                            </Button>\r\n                        ))}\r\n                    </Box>\r\n\r\n                    <Box sx={{ flexGrow: 0 }}>\r\n                        <Tooltip title=\"Open settings\">\r\n                            <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n                                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Menu\r\n                            sx={{ mt: '45px' }}\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={isUserMenuOpen}\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            open={Boolean(isUserMenuOpen)}\r\n                            onClose={handleCloseUserMenu}\r\n                        >\r\n                            {settings.map((setting) => (\r\n                                <MenuItem key={setting} onClick={handleCloseUserMenu}>\r\n                                    <Typography textAlign=\"center\">{setting}</Typography>\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Menu>\r\n                    </Box>\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    );\r\n};\r\nexport default ResponsiveAppBar;\r\n","import {Grid, Stack, TextField} from \"@mui/material\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport React from \"react\";\r\nimport {gql, useQuery} from \"@apollo/client\";\r\nimport Player from \"../components/Player\";\r\nimport {useLocation} from \"react-router-dom\";\r\n\r\nfunction LogPage() {\r\n    const location = useLocation();\r\n    const logCode = location.state.code;\r\n    console.log(location.state.code);\r\n\r\n    let assocArray = getPlayerInformation(logCode);\r\n    if (!assocArray) {\r\n        return 'Hold up';\r\n    }\r\n\r\n    const arr = Array.from(assocArray, ([key, value]) => {\r\n        return Array.from(value, ([key, value]) => {\r\n            return value;\r\n        });\r\n    });\r\n    console.log(arr);\r\n    let renderArr = [];\r\n    arr.forEach((playerClass) => {\r\n        playerClass.forEach((player) => {\r\n            renderArr.push(<Grid item key={player.props.id}> {player.props.name} </Grid>);\r\n        })\r\n    })\r\n    return (\r\n        <Container maxWidth={'95%'}>\r\n            <Box display=\"flex\" justifyContent=\"center\" paddingY={2}>\r\n                <Stack spacing={2} alignItems=\"center\">\r\n                    <Typography variant=\"h5\">\r\n                        Insert link to warcraftlogs report in the field below. Currently only TBC logs are accepted.\r\n                    </Typography>\r\n                    <TextField id=\"filled-basic\" variant=\"filled\" hiddenLabel size=\"small\" sx={{width: 1 / 2}}/>\r\n                    <Button variant=\"contained\" >\r\n                        <Typography>\r\n                            Analyze\r\n                        </Typography>\r\n                    </Button>\r\n                    <Grid container spacing={2}>\r\n                        {renderArr}\r\n                    </Grid>\r\n                </Stack>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n\r\nfunction getPlayerInformation(logCode) {\r\n    const PLAYER_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"${logCode}\"){\r\n\t\t\tplayerDetails(startTime:386982, endTime:13327785)\r\n\t\t}\r\n\t}\r\n}`;\r\n    const {loading, error, data} = useQuery(PLAYER_QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n\r\n    const playerData = data.reportData.report.playerDetails.data.playerDetails;\r\n    let playerList = new Map();\r\n\r\n    for(const key in playerData){\r\n        playerData[key].forEach((player) => {\r\n            if (!playerList.has(player.type)){\r\n                playerList.set(player.type, new Map());\r\n                playerList.get(player.type).set(player.name, <Player id={player.id} name={player.name} playerClass={player.type}/>);\r\n            } else {\r\n                if (!playerList.get(player.type).has(player.id)) {\r\n                    playerList.get(player.type).set(player.name, <Player id={player.id} name={player.name} playerClass={player.type}/>);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    for (const key of playerList.keys()) {\r\n        playerList.set(key, new Map([...playerList.get(key)].sort()));\r\n    }\r\n\r\n    return new Map([...playerList].sort());\r\n}\r\n\r\nexport default LogPage;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Homepage from \"./pages/Homepage\";\nimport {BrowserRouter as Router, Route, Routes} from \"react-router-dom\";\nimport ResponsiveAppBar from \"./components/ResponsiveAppBar\";\nimport {ApolloClient, ApolloProvider, createHttpLink, InMemoryCache} from \"@apollo/client\";\nimport {setContext} from \"@apollo/client/link/context\";\nimport LogPage from \"./pages/LogPage\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nconst httpLink = createHttpLink({\n    uri: process.env.REACT_APP_WARCRAFTLOGS_URI,\n});\n\nconst authLink = setContext((_, {headers}) => {\n    const token = process.env.REACT_APP_WARCRAFTLOGS_BEARER;\n    return {\n        headers: {\n            ...headers,\n            authorization: \"Bearer \" + token,\n        }\n    }\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n});\n\n\nroot.render(\n    <div>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n        />\n\n        <ApolloProvider client={client}>\n            <Router>\n                <ResponsiveAppBar/>\n                <Routes>\n                    <Route path=\"/\" element={<Homepage client={client}/>}/>\n                    <Route path=\"/app\" element={<App/>}/>\n                    <Route path=\"/logpage\" element={<LogPage/>}/>\n                </Routes>\n            </Router>\n        </ApolloProvider>\n    </div>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}