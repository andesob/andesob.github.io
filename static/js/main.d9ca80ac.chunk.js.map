{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","components/LinkInput.js","pages/Homepage.js","components/ResponsiveAppBar.js","components/LogGridRow.js","pages/LogPage.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","process","href","target","rel","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","LinkInput","_useState","useState","_useState2","Object","slicedToArray","logCode","setLogCode","navigate","useNavigate","Fragment","Typography","variant","TextField","id","onChange","event","value","hiddenLabel","size","sx","width","Button","onClick","replace","state","code","Homepage","Container","maxWidth","Box","display","justifyContent","paddingY","Stack","spacing","alignItems","components_LinkInput","pages","settings","ResponsiveAppBar","anchorElNav","setAnchorElNav","_useState3","_useState4","isUserMenuOpen","setIsUserMenuOpen","handleCloseUserMenu","react","AppBar","position","Toolbar","disableGutters","Adb_default","xs","md","mr","noWrap","component","fontFamily","fontWeight","letterSpacing","color","textDecoration","flexGrow","IconButton","aria-label","aria-controls","aria-haspopup","currentTarget","Menu_default","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","map","page","MenuItem","key","textAlign","my","Tooltip","title","Avatar","mt","setting","LogGridRow","props","player","auras","encounters","auraElements","whitelist","elementList","forEach","aura","includes","abilityID","element","get","name","paddingX","Grid","item","style","minWidth","padding","icon","count","push","createAuraElements","auraMap","Map","auraFight","has","ability","set","parseAurasToDisplay","borderBottom","container","playerClass","length","LogPage","useLocation","fightIds","EVENT_QUERY","gql","_templateObject3","taggedTemplateLiteral","_useQuery3","useQuery","loading","error","data","temp","reportData","report","fights","fight","encounterID","getAllFightInformation","playerMap","PLAYER_QUERY","_templateObject","_useQuery","playerData","playerDetails","playerClassList","playerList","playerObj","type","playerObjMap","entries","_step","_iterator","_createForOfIteratorHelper","keys","s","n","done","toConsumableArray","sort","err","f","getPlayerInformation","playerID","Array","isArray","COMBATANT_INFO_QUERY","_templateObject2","_useQuery2","combatantInfo","events","getEventInformation","CircularProgress","auraList","combatantInfoList","sourceID","parseCombatantInfo","sortedMap","classSortMap","playerNameSortMap","fullySortedMap","sortPlayersByNameAndClass","renderArr","gridRow","components_LogGridRow","backgroundColor","paddingLeft","root","ReactDOM","createRoot","document","getElementById","httpLink","createHttpLink","uri","authLink","setContext","_","headers","objectSpread","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","render","ApolloProvider","react_router_dom","components_ResponsiveAppBar","react_router","path","pages_Homepage","src_App","pages_LogPage"],"mappings":"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","file":"static/js/main.d9ca80ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          {process.env.REACT_APP_TESTING}\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {TextField} from \"@mui/material\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport React from \"react\";\r\nimport {useState} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nfunction LinkInput() {\r\n    const [logCode, setLogCode] = useState('');\r\n\r\n    const handleInput = event => {\r\n        setLogCode(event.target.value);\r\n    }\r\n\r\n    const navigate = useNavigate();\r\n    return (\r\n        <>\r\n            <Typography variant=\"h5\">\r\n                Insert link to warcraftlogs report in the field below. Currently only TBC logs are accepted.\r\n            </Typography>\r\n            <TextField id=\"filled-basic\" onChange={handleInput} variant=\"filled\" hiddenLabel size=\"small\"\r\n                       sx={{width: 1 / 2}}/>\r\n            <Button variant=\"contained\"\r\n                    onClick={() => navigate('/logpage', {replace: true, state: {code: logCode}})}>\r\n                <Typography>\r\n                    Analyze\r\n                </Typography>\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LinkInput;","import React from 'react';\r\nimport {\r\n    Stack\r\n} from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport LinkInput from \"../components/LinkInput\";\r\n\r\n\r\nfunction Homepage() {\r\n    return (\r\n        <Container maxWidth={'95%'}>\r\n            <Box display=\"flex\" justifyContent=\"center\" paddingY={2}>\r\n                <Stack spacing={2} alignItems=\"center\">\r\n                    <LinkInput/>\r\n                </Stack>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n\r\n// function getPlayerInformation() {\r\n//     const PLAYER_QUERY = gql`\r\n//     {\r\n// \treportData{\r\n// \t\treport(code:\"6qZLQG8N7gyvh4Td\"){\r\n// \t\t\tplayerDetails(startTime:386982, endTime:13327785)\r\n// \t\t}\r\n// \t}\r\n// }`;\r\n//     const {loading, error, data} = useQuery(PLAYER_QUERY);\r\n//     if (loading || error) {\r\n//         return false;\r\n//     }\r\n//\r\n//     const playerData = data.reportData.report.playerDetails.data.playerDetails;\r\n//     let playerList = new Map();\r\n//\r\n//     for(const key in playerData){\r\n//         playerData[key].forEach((player) => {\r\n//             // console.log(playerList);\r\n//             if (!playerList.has(player.type)){\r\n//                 playerList.set(player.type, new Map());\r\n//                 playerList.get(player.type).set(player.name, <Player id={player.id} name={player.name} playerClass={player.type}/>);\r\n//             } else {\r\n//                 if (!playerList.get(player.type).has(player.id)) {\r\n//                     playerList.get(player.type).set(player.name, <Player id={player.id} name={player.name} playerClass={player.type}/>);\r\n//                     // playerList[player.id] = <Player id={player.id} name={player.name} playerClass={player.type}/>;\r\n//                 }\r\n//             }\r\n//         });\r\n//     }\r\n//\r\n//     for (const key of playerList.keys()) {\r\n//         playerList.set(key, new Map([...playerList.get(key)].sort()));\r\n//     }\r\n//\r\n//     return new Map([...playerList].sort());\r\n// }\r\n\r\n// function getEventInformation() {\r\n//     const EVENT_QUERY = gql`\r\n//     {\r\n// \treportData{\r\n// \t\treport(code:\"6qZLQG8N7gyvh4Td\"){\r\n// \t\t\tevents(startTime:386982, endTime:13327785){\r\n// \t\t\t\tdata\r\n// \t\t\t}\r\n// \t\t}\r\n// \t}\r\n// }`;\r\n//\r\n//     const {loading, error, data} = useQuery(EVENT_QUERY);\r\n//     if (loading || error) {\r\n//         return false;\r\n//     }\r\n//\r\n//     const temp = data.reportData.report.events.data;\r\n//\r\n//     let arr = [];\r\n//     let playerArr = {};\r\n//     let count = 0;\r\n//     temp.forEach((event) => {\r\n//         if (event.type === 'combatantinfo' && !playerArr.hasOwnProperty(event.sourceID)) {\r\n//             count++;\r\n//             playerArr[event.sourceID] = event;\r\n//         }\r\n//         if (event.type === 'heal' && event.sourceID === 9) {\r\n//             arr.push(event);\r\n//         }\r\n//     })\r\n//     // console.log(Object.keys(playerArr).length);\r\n//     console.log(playerArr);\r\n//\r\n//     return arr;\r\n//\r\n// }\r\n\r\n// function getMemberInformation() {\r\n//     const QUERY = gql`\r\n//     query {\r\n// \tguildData{\r\n// \t\tguild(id:480659){\r\n// \t\t\tattendance{\r\n// \t\t\t\tdata{\r\n// \t\t\t\t\tplayers{\r\n// \t\t\t\t\t\tname\r\n// \t\t\t\t\t}\r\n// \t\t\t\t}\r\n// \t\t\t}\r\n// \t\t}\r\n// \t}\r\n// }`;\r\n//\r\n//     const {loading, error, data} = useQuery(QUERY);\r\n//     if (loading || error) {\r\n//         return false;\r\n//     }\r\n//     const temp = data.guildData.guild.attendance.data;\r\n//     let arr = [];\r\n//     temp.forEach((list) => {\r\n//         list.players.forEach((char) => {\r\n//             if (!arr.includes(char.name)) {\r\n//                 arr.push(char.name);\r\n//             }\r\n//         })\r\n//     })\r\n//     return arr;\r\n// }\r\n\r\nexport default Homepage;","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport AdbIcon from '@mui/icons-material/Adb';\r\nimport {useState} from \"react\";\r\n\r\nconst pages = [\r\n    ['Blogg', \"http://10.14.80.64:3001/\"],\r\n    ['Lokasjon', \"http://10.14.80.64:3002/\"],\r\n    ['Bildesøk', \"http://10.14.80.64:3003/\"],\r\n    ['Youtube 2.0', \"http://10.14.80.64:3004/\"],\r\n    ['Infoscreen', \"http://10.14.80.66:3000/\"],\r\n    ['Notater', \"http://10.200.200.149:3000/\"]\r\n];\r\n\r\nconst settings = ['Profile', 'Account', 'Dashboard', 'Logout'];\r\n\r\nconst ResponsiveAppBar = () => {\r\n    // const [count, setCount] = useState(0);\r\n    const [anchorElNav, setAnchorElNav] = useState(null);\r\n    const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);\r\n\r\n    // const handleClickCounter = () => {\r\n    //     setCount(count + 1);\r\n    // }\r\n\r\n    const handleOpenNavMenu = (event) => {\r\n        setAnchorElNav(event.currentTarget);\r\n    };\r\n    const handleOpenUserMenu = (event) => {\r\n        // console.log(event);\r\n        setIsUserMenuOpen(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseNavMenu = () => {\r\n        setAnchorElNav(null);\r\n    };\r\n\r\n    const handleCloseUserMenu = () => {\r\n        setIsUserMenuOpen(null);\r\n    };\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Container maxWidth=\"xl\">\r\n                <Toolbar disableGutters>\r\n                    <AdbIcon sx={{display: {xs: 'none', md: 'flex'}, mr: 1}}/>\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        noWrap\r\n                        component=\"a\"\r\n                        href=\"/\"\r\n                        sx={{\r\n                            mr: 2,\r\n                            display: {xs: 'none', md: 'flex'},\r\n                            fontFamily: 'monospace',\r\n                            fontWeight: 700,\r\n                            letterSpacing: '.3rem',\r\n                            color: 'inherit',\r\n                            textDecoration: 'none',\r\n                        }}\r\n                    >\r\n                        PogLogs\r\n                    </Typography>\r\n\r\n                    <Box sx={{flexGrow: 1, display: {xs: 'flex', md: 'none'}}}>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"menu-appbar\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleOpenNavMenu}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={anchorElNav}\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'left',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'left',\r\n                            }}\r\n                            open={Boolean(anchorElNav)}\r\n                            onClose={handleCloseNavMenu}\r\n                            sx={{\r\n                                display: {xs: 'block', md: 'none'},\r\n                            }}\r\n                        >\r\n                            {pages.map((page) => (\r\n                                <MenuItem key={page[0]} component={Button} href={page[1]}>\r\n                                    <Typography textAlign=\"center\">{page[0]}</Typography>\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Menu>\r\n                    </Box>\r\n                    <AdbIcon sx={{display: {xs: 'flex', md: 'none'}, mr: 1}}/>\r\n                    <Typography\r\n                        variant=\"h5\"\r\n                        noWrap\r\n                        component=\"a\"\r\n                        href=\"\"\r\n                        sx={{\r\n                            mr: 2,\r\n                            display: {xs: 'flex', md: 'none'},\r\n                            flexGrow: 1,\r\n                            fontFamily: 'monospace',\r\n                            fontWeight: 700,\r\n                            letterSpacing: '.3rem',\r\n                            color: 'inherit',\r\n                            textDecoration: 'none',\r\n                        }}\r\n                    >\r\n                        PogLogs\r\n                    </Typography>\r\n                    <Box sx={{flexGrow: 1, display: {xs: 'none', md: 'flex'}}}>\r\n                        {pages.map((page) => (\r\n                            <Button key={page[0]}\r\n                                    href={page[1]}\r\n                                    sx={{my: 2, color: 'white', display: 'block'}}\r\n                            >\r\n                                {page[0]}\r\n                            </Button>\r\n                        ))}\r\n                    </Box>\r\n\r\n                    <Box sx={{flexGrow: 0}}>\r\n                        <Tooltip title=\"Open settings\">\r\n                            <IconButton onClick={handleOpenUserMenu} sx={{p: 0}}>\r\n                                <Avatar>T</Avatar>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Menu\r\n                            sx={{mt: '45px'}}\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={isUserMenuOpen}\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            open={Boolean(isUserMenuOpen)}\r\n                            onClose={handleCloseUserMenu}\r\n                        >\r\n                            {settings.map((setting) => (\r\n                                <MenuItem key={setting} onClick={handleCloseUserMenu}>\r\n                                    <Typography textAlign=\"center\">{setting}</Typography>\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Menu>\r\n                    </Box>\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    );\r\n};\r\nexport default ResponsiveAppBar;\r\n","import {Button, Grid, Stack} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nfunction LogGridRow(props) {\r\n    const auraWhitelist = [33263, 33261, 33268, 39625, 17538, 17627, 28540, 41605, 28519, 11406, 28509, 28520, 11371, 28497, 28521, 46840, 39627, 28491, 41606, 46838, 33256];\r\n    const player = props.player;\r\n    const auras = props.auras;\r\n    const encounters = props.encounters;\r\n    // console.log(auras);\r\n    // console.log(player);\r\n    const auraMap = parseAurasToDisplay(player, auras);\r\n    const auraElements = createAuraElements(auraMap, auraWhitelist, player);\r\n    return (\r\n        <Grid sx={{borderBottom: 1}} key={\"logGridRowContainer\" + player.get('id')} item container padding={1}>\r\n            <Grid item xs={2} style={{display: \"flex\", alignItems: \"center\"}} key={\"rowPlayerName\" + player.get('name')}\r\n                  color={getClassColor(player.get('playerClass'))}>\r\n                <Typography>\r\n                    {player.get('name')}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={2} style={{display: \"flex\", alignItems: \"center\"}}>\r\n                <Typography>\r\n                    {player.get('auras').length}\r\n                    /\r\n                    {encounters.length}\r\n                </Typography>\r\n            </Grid>\r\n            {/*<Grid item xs={2} key={\"class\" + player.get('id')}> {player.get('playerClass')} </Grid>*/}\r\n            {/*<Grid item xs={8} key={\"aura\" + player.get('id')}>*/}\r\n            <Grid container item xs={8} key={\"GridAuraContainer\" + player.get('id')}>\r\n                {auraElements}\r\n            </Grid>\r\n            {/*</Grid>*/}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction getClassColor(playerClass) {\r\n    let classColors = new Map([\r\n        [\"Druid\", \"#FF7C0A\"],\r\n        [\"Hunter\", \"#AAD372\"],\r\n        [\"Mage\", \"#3FC7EB\"],\r\n        [\"Paladin\", \"#F48CBA\"],\r\n        [\"Priest\", \"#FFFFFF\"],\r\n        [\"Rogue\", \"#FFF468\"],\r\n        [\"Shaman\", \"#0070DD\"],\r\n        [\"Warlock\", \"#8788EE\"],\r\n        [\"Warrior\", \"#C69B6D\"]\r\n    ]);\r\n    return classColors.get(playerClass);\r\n}\r\n\r\nfunction createAuraElements(auras, whitelist, player) {\r\n    const elementList = [];\r\n    auras.forEach((aura) => {\r\n        if (whitelist.includes(aura.abilityID)) {\r\n            const element = <Stack key={\"stack\" + player.get('id') + aura.name} alignItems={\"center\"} maxWidth={\"35px\"}\r\n                                   paddingX={1}>\r\n                <Grid item display={\"flex\"} justifyContent={\"center\"} key={\"auraName\" + aura.name + player.get('id')}>\r\n                    <Button key={\"button\" + player.get('id') + aura.name} variant={\"text\"}\r\n                            style={{minWidth: \"10px\", padding: 0}}\r\n                            href={\"https://tbc.wowhead.com/spell=\" + aura.abilityID}>\r\n                        <img width={\"100%\"} src={\"https://wow.zamimg.com/images/wow/icons/large/\" + aura.icon}\r\n                             alt={aura.icon}/>\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item key={\"auraNameCount\" + aura.name + player.get('name')}>{aura.count}</Grid>\r\n            </Stack>;\r\n            elementList.push(element);\r\n        }\r\n    })\r\n    return elementList;\r\n}\r\n\r\nfunction parseAurasToDisplay(player, auras) {\r\n    let auraMap = new Map();\r\n\r\n    auras.forEach((auraFight) => {\r\n        auraFight.forEach((aura) => {\r\n            if (!auraMap.has(aura.ability)) {\r\n                auraMap.set(aura.ability, {abilityID: aura.ability, icon: aura.icon, name: aura.name, count: 1});\r\n            } else {\r\n                auraMap.get(aura.ability).count++;\r\n            }\r\n        });\r\n    })\r\n\r\n    // player.get('auras').forEach((auraFight) => {\r\n    //     auraFight.forEach((aura) => {\r\n    //         // console.log(aura.ability);\r\n    //         if (!auraMap.has(aura.ability)) {\r\n    //             auraMap.set(aura.ability, {abilityID: aura.ability, icon: aura.icon, name: aura.name, count: 0});\r\n    //         } else {\r\n    //             auraMap.get(aura.ability).count++;\r\n    //         }\r\n    //     });\r\n    // });\r\n    return auraMap;\r\n}\r\n\r\nexport default LogGridRow;","import {CircularProgress, Grid, Stack} from \"@mui/material\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport React from \"react\";\r\nimport {gql, useQuery} from \"@apollo/client\";\r\nimport {useLocation} from \"react-router-dom\";\r\nimport LogGridRow from \"../components/LogGridRow\";\r\nimport LinkInput from \"../components/LinkInput\";\r\n\r\nfunction LogPage() {\r\n    const location = useLocation();\r\n    const logCode = location.state.code;\r\n    // console.log(location.state.code);\r\n    const fightIds = getAllFightInformation(logCode);\r\n    const playerMap = getPlayerInformation(logCode);\r\n    const temp = getEventInformation(logCode, 9, fightIds);\r\n    if (!temp || !playerMap) {\r\n        return (\r\n            <Container maxWidth={'95%'}>\r\n                <Box display=\"flex\" justifyContent=\"center\" paddingY={2}>\r\n                    <Stack spacing={2} alignItems=\"center\">\r\n                        <LinkInput/>\r\n                        <CircularProgress/>\r\n                    </Stack>\r\n                </Box>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n\r\n    const auraList = parseCombatantInfo(playerMap, temp);\r\n    const sortedMap = sortPlayersByNameAndClass(playerMap);\r\n\r\n    // console.log(sortedMap);\r\n\r\n    let renderArr = [];\r\n\r\n    sortedMap.forEach((player) => {\r\n        const gridRow = <LogGridRow key={\"logGridRow\" + player.get('id')} player={player} auras={auraList.get(player.get('id'))} encounters={fightIds}/>\r\n        renderArr.push(gridRow);\r\n    })\r\n\r\n    return (\r\n        <Container maxWidth={'95%'}>\r\n            <Box display=\"flex\" justifyContent=\"center\" paddingY={2}>\r\n                <Stack spacing={2} alignItems=\"center\">\r\n                    <LinkInput/>\r\n                    <Grid key={\"GridContainer\"} container style={{backgroundColor: \"black\", color: \"white\"}}>\r\n                        <Grid item container key={\"GridHeaderName\"} style={{backgroundColor: \"darkslategray\"}} padding={1}>\r\n                            <Grid item xs={2} key={\"GridHeaderName\"}>\r\n                                <Typography variant={\"h5\"}>\r\n                                    Player\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} key={\"GridHeaderEncounters\"}>\r\n                                <Typography variant={\"h5\"}>\r\n                                    Encounters\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={8} paddingLeft={2} key={\"GridHeaderAuras\"}>\r\n                                <Typography variant={\"h5\"}>\r\n                                    Auras\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {renderArr}\r\n                    </Grid>\r\n                </Stack>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n\r\nfunction sortPlayersByNameAndClass(playerList) {\r\n    const classSortMap = new Map();\r\n    const playerNameSortMap = new Map();\r\n\r\n    playerList.forEach((player) => {\r\n        playerNameSortMap.set(player.get('name'), player);\r\n    });\r\n\r\n    const sortedPlayerNameMap = new Map([...playerNameSortMap].sort());\r\n\r\n    sortedPlayerNameMap.forEach((player) => {\r\n        if (!classSortMap.has(player.get('playerClass'))) {\r\n            classSortMap.set(player.get('playerClass'), new Map());\r\n        }\r\n        classSortMap.get(player.get('playerClass')).set(player.get('name'), player);\r\n    });\r\n\r\n    const sortedMap = new Map([...classSortMap].sort());\r\n\r\n    const fullySortedMap = new Map();\r\n    sortedMap.forEach((playerClass) => {\r\n        playerClass.forEach((player) => {\r\n            // console.log(player);\r\n            fullySortedMap.set(player.get('name'), player)\r\n        })\r\n    })\r\n\r\n    // console.log(fullySortedMap);\r\n    return fullySortedMap;\r\n}\r\n\r\nfunction getPlayerInformation(logCode) {\r\n    const PLAYER_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"${logCode}\"){\r\n\t\t\tplayerDetails(startTime:386982, endTime:13327785)\r\n\t\t}\r\n\t}\r\n}`;\r\n    const {loading, error, data} = useQuery(PLAYER_QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n\r\n    const playerData = data.reportData.report.playerDetails.data.playerDetails;\r\n    let playerClassList = new Map();\r\n    let playerList = new Map();\r\n    for(const key in playerData){\r\n        playerData[key].forEach((player) => {\r\n            // const playerObj = <Player id={player.id} name={player.name} playerClass={player.type}/>;\r\n            const playerObj = {id: player.id, name: player.name, playerClass: player.type, auras: []};\r\n            const playerObjMap = new Map(Object.entries(playerObj));\r\n            playerList.set(player.id, playerObjMap);\r\n\r\n            if (!playerClassList.has(player.type)) {\r\n                playerClassList.set(player.type, new Map());\r\n                playerClassList.get(player.type).set(player.name, playerObjMap);\r\n            } else {\r\n                if (!playerClassList.get(player.type).has(player.id)) {\r\n                    playerClassList.get(player.type).set(player.name, playerObjMap);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    for (const key of playerClassList.keys()) {\r\n        playerClassList.set(key, new Map([...playerClassList.get(key)].sort()));\r\n    }\r\n\r\n    // console.log(playerClassList);\r\n\r\n    return playerList;\r\n}\r\n\r\n// function getTableInformation(logCode, playerID) {\r\n//     const TABLE_QUERY = gql`\r\n//     {\r\n// \treportData{\r\n// \t\treport(code:\"${logCode}\"){\r\n// \t\t\ttable(startTime:386982, endTime:13327785)\r\n// \t\t}\r\n// \t}\r\n// }`;\r\n//\r\n//     const {loading, error, data} = useQuery(TABLE_QUERY);\r\n//     if (loading || error) {\r\n//         return false;\r\n//     }\r\n//\r\n//     const temp = data.reportData.report.table.data;\r\n//     // console.log(temp);\r\n//\r\n//     temp.forEach((evt) => {\r\n//         // console.log(evt);\r\n//     });\r\n//\r\n//     return false;\r\n// }\r\n\r\nfunction getEventInformation(logCode, playerID, fightIds) {\r\n    fightIds = Array.isArray(fightIds) ? fightIds : [];\r\n    const COMBATANT_INFO_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"${logCode}\"){\r\n\t\t\tevents(startTime:0, endTime:99999999, fightIDs:[${fightIds}], dataType: CombatantInfo){\r\n\t\t\t\tdata\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}`;\r\n\r\n//     const CAST_INFO_QUERY = gql`\r\n//     {\r\n// \treportData{\r\n// \t\treport(code:\"${logCode}\"){\r\n// \t\t\tevents(startTime:0, endTime:99999999, fightIDs:[${fightIds}], dataType: Casts){\r\n// \t\t\t\tdata\r\n// \t\t\t}\r\n// \t\t}\r\n// \t}\r\n// }`;\r\n\r\n    // console.log(fightIds);\r\n    const {loading, error, data} = useQuery(COMBATANT_INFO_QUERY);\r\n    // const {loading, error, data} = useQuery(CAST_INFO_QUERY);\r\n\r\n    if (loading || error) {\r\n        // console.log(error);\r\n        return false;\r\n    }\r\n    const combatantInfo = data.reportData.report.events.data;\r\n    // const castInfo = data.reportData.report.events.data;\r\n    // console.log(\"YOLOOOOO\")\r\n    // console.log(combatantInfo);\r\n    combatantInfo.forEach((event) => {\r\n            // console.log(event);\r\n        if (event.type === \"combatantinfo\") {\r\n        }\r\n    })\r\n    // return false;\r\n\r\n\r\n    // console.log(combatantInfo);\r\n    return combatantInfo;\r\n}\r\n\r\nfunction parseCombatantInfo(playerMap, combatantInfoList) {\r\n    const auraList = new Map();\r\n    // console.log(playerMap);\r\n    combatantInfoList.forEach((event) => {\r\n        const player = playerMap.get(event.sourceID);\r\n        // console.log(event.auras);\r\n        player.get('auras').push(event.auras);\r\n\r\n        if (!auraList.has(event.sourceID)) {\r\n            auraList.set(event.sourceID, [event.auras]);\r\n        } else {\r\n            auraList.get(event.sourceID).push(event.auras);\r\n        }\r\n        // if (event.sourceID === 9) {\r\n        //     auraList.push(event.auras);\r\n        // }\r\n    });\r\n\r\n    return auraList;\r\n    // console.log(auraList);\r\n}\r\n\r\nfunction getAllFightInformation(logCode) {\r\n    const EVENT_QUERY = gql`\r\n    {\r\n\treportData{\r\n\t\treport(code:\"${logCode}\"){\r\n\t\t\tfights{\r\n\t\t\t\tname\r\n\t\t\t\tbossPercentage\r\n\t\t\t\tencounterID\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}`;\r\n\r\n    const {loading, error, data} = useQuery(EVENT_QUERY);\r\n    if (loading || error) {\r\n        return false;\r\n    }\r\n\r\n    const temp = data.reportData.report.fights;\r\n    const fights = [];\r\n    temp.forEach((fight) => {\r\n        if (fight.encounterID !== 0) {\r\n            fights.push(fight.id);\r\n        }\r\n    })\r\n    return fights;\r\n}\r\n\r\nexport default LogPage;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Homepage from \"./pages/Homepage\";\nimport {BrowserRouter as Router, Route, Routes} from \"react-router-dom\";\nimport ResponsiveAppBar from \"./components/ResponsiveAppBar\";\nimport {ApolloClient, ApolloProvider, createHttpLink, InMemoryCache} from \"@apollo/client\";\nimport {setContext} from \"@apollo/client/link/context\";\nimport LogPage from \"./pages/LogPage\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nconst httpLink = createHttpLink({\n    uri: process.env.REACT_APP_WARCRAFTLOGS_URI,\n});\n\nconst authLink = setContext((_, {headers}) => {\n    const token = process.env.REACT_APP_WARCRAFTLOGS_BEARER;\n    return {\n        headers: {\n            ...headers,\n            authorization: \"Bearer \" + token,\n        }\n    }\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n});\n\n\nroot.render(\n    <div>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n        />\n\n        <ApolloProvider client={client}>\n            <Router>\n                <ResponsiveAppBar/>\n                <Routes>\n                    <Route path=\"/\" element={<Homepage/>}/>\n                    <Route path=\"/app\" element={<App/>}/>\n                    <Route path=\"/logpage\" element={<LogPage/>}/>\n                </Routes>\n            </Router>\n        </ApolloProvider>\n    </div>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}